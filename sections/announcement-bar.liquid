{% comment %}
  STHLM Announcement Bar
  Renders promotional announcements above the main header
  Supports multiple announcement blocks with auto-scrolling
{% endcomment %}

{%- if section.blocks.size > 0 -%}
  <div
    class="announcement-bar color-{{ section.settings.color_scheme }} gradient"
    role="region"
    aria-label="{{ 'sections.header.announcement' | t }}"
    {%- if section.blocks.size > 1 -%}
      data-announcement-bar
      data-autoplay="{{ section.settings.auto_rotate }}"
      data-speed="{{ section.settings.change_slides_speed }}"
    {%- endif -%}
  >
    {%- if section.blocks.size > 1 -%}
      <div class="announcement-bar__slider">
        <div class="announcement-bar__track" style="--announcement-count: {{ section.blocks.size }}">
          {%- for block in section.blocks -%}
            <div
              class="announcement-bar__slide{% if forloop.first %} announcement-bar__slide--active{% endif %}"
              {{ block.shopify_attributes }}
              data-slide-index="{{ forloop.index0 }}"
            >
              {% render 'announcement-bar-content', block: block %}
            </div>
          {%- endfor -%}
        </div>

        {%- if section.settings.show_navigation and section.blocks.size > 1 -%}
          <button
            class="announcement-bar__prev"
            aria-label="{{ 'general.slider.previous_slide' | t }}"
            type="button"
          >
            <svg viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
              <path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/>
            </svg>
          </button>

          <button
            class="announcement-bar__next"
            aria-label="{{ 'general.slider.next_slide' | t }}"
            type="button"
          >
            <svg viewBox="0 0 24 24" width="16" height="16" fill="currentColor">
              <path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/>
            </svg>
          </button>
        {%- endif -%}

        {%- if section.settings.show_dots and section.blocks.size > 1 -%}
          <div class="announcement-bar__dots" role="tablist">
            {%- for block in section.blocks -%}
              <button
                class="announcement-bar__dot{% if forloop.first %} announcement-bar__dot--active{% endif %}"
                type="button"
                role="tab"
                aria-selected="{% if forloop.first %}true{% else %}false{% endif %}"
                aria-label="{{ 'general.slider.load_slide' | t }} {{ forloop.index }}"
                data-slide-index="{{ forloop.index0 }}"
              >
                <span class="visually-hidden">
                  {{- 'general.slider.slide' | t }}
                  {{ forloop.index -}}
                </span>
              </button>
            {%- endfor -%}
          </div>
        {%- endif -%}
      </div>
    {%- else -%}
      <div class="announcement-bar__single">
        {% render 'announcement-bar-content', block: section.blocks.first %}
      </div>
    {%- endif -%}
  </div>

  <style>
    .announcement-bar {
      position: relative;
      overflow: hidden;
      background: linear-gradient(90deg, #2d6ccd 0%, #1e5dbc 50%, #2d6ccd 100%);
      color: white;
      font-size: 1.4rem;
      line-height: 1.4;
      z-index: 2;
    }

    .announcement-bar__slider {
      position: relative;
      height: {{ section.settings.announcement_height | default: 40 }}px;
      overflow: hidden;
    }

    .announcement-bar__track {
      display: flex;
      height: 100%;
      transition: transform 0.5s ease-in-out;
    }

    .announcement-bar__slide {
      flex: 0 0 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 0 2rem;
      opacity: 0;
      transition: opacity 0.3s ease;
    }

    .announcement-bar__slide--active {
      opacity: 1;
    }

    .announcement-bar__single {
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 1rem 2rem;
      min-height: {{ section.settings.announcement_height | default: 40 }}px;
    }

    .announcement-bar__content {
      text-align: center;
      max-width: 80rem;
      margin: 0 auto;
    }

    .announcement-bar__text {
      margin: 0;
      font-weight: 500;
    }

    .announcement-bar__link {
      color: inherit;
      text-decoration: underline;
      text-underline-offset: 0.3rem;
      transition: opacity 0.2s ease;
    }

    .announcement-bar__link:hover {
      opacity: 0.8;
      text-decoration-thickness: 0.2rem;
    }

    /* Navigation Buttons */
    .announcement-bar__prev,
    .announcement-bar__next {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(255, 255, 255, 0.2);
      border: none;
      color: white;
      padding: 0.5rem;
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.2s ease;
      z-index: 2;
    }

    .announcement-bar__prev {
      left: 1rem;
    }

    .announcement-bar__next {
      right: 1rem;
    }

    .announcement-bar__prev:hover,
    .announcement-bar__next:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-50%) scale(1.1);
    }

    /* Dots Navigation */
    .announcement-bar__dots {
      position: absolute;
      bottom: 0.5rem;
      left: 50%;
      transform: translateX(-50%);
      display: flex;
      gap: 0.5rem;
    }

    .announcement-bar__dot {
      width: 0.8rem;
      height: 0.8rem;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.4);
      border: none;
      cursor: pointer;
      transition: all 0.2s ease;
    }

    .announcement-bar__dot--active {
      background: white;
      transform: scale(1.2);
    }

    /* Mobile Responsiveness */
    @media screen and (max-width: 749px) {
      .announcement-bar {
        font-size: 1.2rem;
      }

      .announcement-bar__slide,
      .announcement-bar__single {
        padding: 0 1rem;
      }

      .announcement-bar__prev,
      .announcement-bar__next {
        display: none;
      }
    }

    /* Animation for scrolling text effect */
    @keyframes scroll-text {
      0% { transform: translateX(100%); }
      100% { transform: translateX(-100%); }
    }

    .announcement-bar__text--scroll {
      animation: scroll-text {{ section.settings.scroll_speed | default: 20 }}s linear infinite;
      white-space: nowrap;
    }

    /* Accessibility */
    @media (prefers-reduced-motion: reduce) {
      .announcement-bar__track,
      .announcement-bar__text--scroll {
        animation: none;
        transition: none;
      }
    }
  </style>

  {% if section.blocks.size > 1 %}
    <script>
      class AnnouncementBar extends HTMLElement {
        constructor() {
          super();
          this.currentSlide = 0;
          this.slides = this.querySelectorAll('.announcement-bar__slide');
          this.dots = this.querySelectorAll('.announcement-bar__dot');
          this.prevBtn = this.querySelector('.announcement-bar__prev');
          this.nextBtn = this.querySelector('.announcement-bar__next');
          this.autoplay = this.dataset.autoplay === 'true';
          this.speed = parseInt(this.dataset.speed) * 1000 || 5000;
          this.interval = null;

          this.init();
        }

        init() {
          if (this.prevBtn) this.prevBtn.addEventListener('click', () => this.previousSlide());
          if (this.nextBtn) this.nextBtn.addEventListener('click', () => this.nextSlide());

          this.dots.forEach((dot, index) => {
            dot.addEventListener('click', () => this.goToSlide(index));
          });

          if (this.autoplay && this.slides.length > 1) {
            this.startAutoplay();
            this.addEventListener('mouseenter', () => this.stopAutoplay());
            this.addEventListener('mouseleave', () => this.startAutoplay());
          }
        }

        goToSlide(index) {
          this.slides[this.currentSlide].classList.remove('announcement-bar__slide--active');
          this.dots[this.currentSlide]?.classList.remove('announcement-bar__dot--active');

          this.currentSlide = index;

          this.slides[this.currentSlide].classList.add('announcement-bar__slide--active');
          this.dots[this.currentSlide]?.classList.add('announcement-bar__dot--active');
          this.dots[this.currentSlide]?.setAttribute('aria-selected', 'true');

          // Update aria-selected for all dots
          this.dots.forEach((dot, i) => {
            dot.setAttribute('aria-selected', i === this.currentSlide ? 'true' : 'false');
          });
        }

        nextSlide() {
          const nextIndex = (this.currentSlide + 1) % this.slides.length;
          this.goToSlide(nextIndex);
        }

        previousSlide() {
          const prevIndex = (this.currentSlide - 1 + this.slides.length) % this.slides.length;
          this.goToSlide(prevIndex);
        }

        startAutoplay() {
          if (this.slides.length <= 1) return;
          this.stopAutoplay();
          this.interval = setInterval(() => this.nextSlide(), this.speed);
        }

        stopAutoplay() {
          if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
          }
        }
      }

      customElements.define('announcement-bar', AnnouncementBar);
    </script>
  {% endif %}
{%- endif -%}

{% schema %}
{
  "name": "Announcement bar",
  "class": "announcement-bar-section",
  "max_blocks": 5,
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "range",
      "id": "announcement_height",
      "min": 30,
      "max": 80,
      "step": 5,
      "unit": "px",
      "label": "Announcement height",
      "default": 40
    },
    {
      "type": "header",
      "content": "Auto-rotating announcements"
    },
    {
      "type": "checkbox",
      "id": "auto_rotate",
      "label": "Auto-rotate announcements",
      "default": true
    },
    {
      "type": "range",
      "id": "change_slides_speed",
      "min": 3,
      "max": 10,
      "step": 1,
      "unit": "s",
      "label": "Change slides every",
      "default": 5
    },
    {
      "type": "checkbox",
      "id": "show_navigation",
      "label": "Show navigation arrows",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "show_dots",
      "label": "Show dot navigation",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "announcement",
      "name": "Announcement",
      "settings": [
        {
          "type": "textarea",
          "id": "text",
          "default": "Welcome to our store",
          "label": "Text"
        },
        {
          "type": "url",
          "id": "link",
          "label": "Link"
        },
        {
          "type": "select",
          "id": "text_alignment",
          "options": [
            {
              "value": "left",
              "label": "t:sections.announcement-bar.settings.text_alignment.options__2.label"
            },
            {
              "value": "center",
              "label": "t:sections.announcement-bar.settings.text_alignment.options__1.label"
            },
            {
              "value": "right",
              "label": "t:sections.announcement-bar.settings.text_alignment.options__3.label"
            }
          ],
          "default": "center",
          "label": "t:sections.announcement-bar.settings.text_alignment.label"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Announcement bar",
      "blocks": [
        {
          "type": "announcement"
        }
      ]
    }
  ]
}
{% endschema %}
